//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/RicoShot/Scripts/InputActions/Matching.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RicoShot.InputActions
{
    public partial class @MatchingInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MatchingInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Matching"",
    ""maps"": [
        {
            ""name"": ""Test"",
            ""id"": ""68811ac4-2b5b-47ea-9876-c4aecb940094"",
            ""actions"": [
                {
                    ""name"": ""SelectLeft"",
                    ""type"": ""Button"",
                    ""id"": ""26250086-c5e0-448c-ba7f-81766faa8f36"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectRight"",
                    ""type"": ""Button"",
                    ""id"": ""6eb062dc-2d7b-4221-aeb2-92fd73b8049b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""56a99a9b-8330-46b7-a7a7-80f1b5a28608"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""f2943a4d-f322-4a8d-a95a-f4a420d045c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb041996-6318-44d3-ad84-1972c758523e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f83f690-ff24-4eff-86cb-959e312b643e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b99d0755-5701-4175-9f2f-637e53dbdf8f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47c20e89-f74b-427c-bfb4-663980107c57"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c10340e3-b708-4115-a185-18417aefbb41"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f4814d2-f1ca-44e4-b762-490ba0e91494"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Main"",
            ""id"": ""4ff4f121-0c81-4509-9813-a0212e7a973a"",
            ""actions"": [
                {
                    ""name"": ""SelectAlpha"",
                    ""type"": ""Button"",
                    ""id"": ""1513e627-fc60-4008-b2b5-a694a19d969e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectBravo"",
                    ""type"": ""Button"",
                    ""id"": ""346070d1-f8a0-4e51-860b-62a517364028"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""9d5c9d93-6391-4b5e-82df-8fc94b5b4a6e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""aa37fb8a-b663-4e80-ab2f-c7f60b997d8d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19c505f6-88c8-4c39-b957-7ddc46f6aff5"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectAlpha"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c41e48b1-139b-4346-bb9e-bff840d4fc1c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectBravo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c911de9-40fb-48a3-8b4a-5e866bea026f"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27eea679-ac24-4aa8-a8a5-c320ec0aa767"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Test
            m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
            m_Test_SelectLeft = m_Test.FindAction("SelectLeft", throwIfNotFound: true);
            m_Test_SelectRight = m_Test.FindAction("SelectRight", throwIfNotFound: true);
            m_Test_Enter = m_Test.FindAction("Enter", throwIfNotFound: true);
            m_Test_Cancel = m_Test.FindAction("Cancel", throwIfNotFound: true);
            // Main
            m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
            m_Main_SelectAlpha = m_Main.FindAction("SelectAlpha", throwIfNotFound: true);
            m_Main_SelectBravo = m_Main.FindAction("SelectBravo", throwIfNotFound: true);
            m_Main_Cancel = m_Main.FindAction("Cancel", throwIfNotFound: true);
            m_Main_Confirm = m_Main.FindAction("Confirm", throwIfNotFound: true);
        }

        ~@MatchingInputs()
        {
            UnityEngine.Debug.Assert(!m_Test.enabled, "This will cause a leak and performance issues, MatchingInputs.Test.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Main.enabled, "This will cause a leak and performance issues, MatchingInputs.Main.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Test
        private readonly InputActionMap m_Test;
        private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
        private readonly InputAction m_Test_SelectLeft;
        private readonly InputAction m_Test_SelectRight;
        private readonly InputAction m_Test_Enter;
        private readonly InputAction m_Test_Cancel;
        public struct TestActions
        {
            private @MatchingInputs m_Wrapper;
            public TestActions(@MatchingInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @SelectLeft => m_Wrapper.m_Test_SelectLeft;
            public InputAction @SelectRight => m_Wrapper.m_Test_SelectRight;
            public InputAction @Enter => m_Wrapper.m_Test_Enter;
            public InputAction @Cancel => m_Wrapper.m_Test_Cancel;
            public InputActionMap Get() { return m_Wrapper.m_Test; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
            public void AddCallbacks(ITestActions instance)
            {
                if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
                @SelectLeft.started += instance.OnSelectLeft;
                @SelectLeft.performed += instance.OnSelectLeft;
                @SelectLeft.canceled += instance.OnSelectLeft;
                @SelectRight.started += instance.OnSelectRight;
                @SelectRight.performed += instance.OnSelectRight;
                @SelectRight.canceled += instance.OnSelectRight;
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
            }

            private void UnregisterCallbacks(ITestActions instance)
            {
                @SelectLeft.started -= instance.OnSelectLeft;
                @SelectLeft.performed -= instance.OnSelectLeft;
                @SelectLeft.canceled -= instance.OnSelectLeft;
                @SelectRight.started -= instance.OnSelectRight;
                @SelectRight.performed -= instance.OnSelectRight;
                @SelectRight.canceled -= instance.OnSelectRight;
                @Enter.started -= instance.OnEnter;
                @Enter.performed -= instance.OnEnter;
                @Enter.canceled -= instance.OnEnter;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
            }

            public void RemoveCallbacks(ITestActions instance)
            {
                if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITestActions instance)
            {
                foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TestActions @Test => new TestActions(this);

        // Main
        private readonly InputActionMap m_Main;
        private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
        private readonly InputAction m_Main_SelectAlpha;
        private readonly InputAction m_Main_SelectBravo;
        private readonly InputAction m_Main_Cancel;
        private readonly InputAction m_Main_Confirm;
        public struct MainActions
        {
            private @MatchingInputs m_Wrapper;
            public MainActions(@MatchingInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @SelectAlpha => m_Wrapper.m_Main_SelectAlpha;
            public InputAction @SelectBravo => m_Wrapper.m_Main_SelectBravo;
            public InputAction @Cancel => m_Wrapper.m_Main_Cancel;
            public InputAction @Confirm => m_Wrapper.m_Main_Confirm;
            public InputActionMap Get() { return m_Wrapper.m_Main; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
            public void AddCallbacks(IMainActions instance)
            {
                if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
                @SelectAlpha.started += instance.OnSelectAlpha;
                @SelectAlpha.performed += instance.OnSelectAlpha;
                @SelectAlpha.canceled += instance.OnSelectAlpha;
                @SelectBravo.started += instance.OnSelectBravo;
                @SelectBravo.performed += instance.OnSelectBravo;
                @SelectBravo.canceled += instance.OnSelectBravo;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
            }

            private void UnregisterCallbacks(IMainActions instance)
            {
                @SelectAlpha.started -= instance.OnSelectAlpha;
                @SelectAlpha.performed -= instance.OnSelectAlpha;
                @SelectAlpha.canceled -= instance.OnSelectAlpha;
                @SelectBravo.started -= instance.OnSelectBravo;
                @SelectBravo.performed -= instance.OnSelectBravo;
                @SelectBravo.canceled -= instance.OnSelectBravo;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Confirm.started -= instance.OnConfirm;
                @Confirm.performed -= instance.OnConfirm;
                @Confirm.canceled -= instance.OnConfirm;
            }

            public void RemoveCallbacks(IMainActions instance)
            {
                if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMainActions instance)
            {
                foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MainActions @Main => new MainActions(this);
        public interface ITestActions
        {
            void OnSelectLeft(InputAction.CallbackContext context);
            void OnSelectRight(InputAction.CallbackContext context);
            void OnEnter(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
        }
        public interface IMainActions
        {
            void OnSelectAlpha(InputAction.CallbackContext context);
            void OnSelectBravo(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnConfirm(InputAction.CallbackContext context);
        }
    }
}
