//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.0
//     from Assets/RicoShot/Scripts/InputActions/ModeSelect.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RicoShot.InputActions
{
    public partial class @ModeSelectInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ModeSelectInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ModeSelect"",
    ""maps"": [
        {
            ""name"": ""Select"",
            ""id"": ""4eb21485-c8cb-4b7e-bc01-4a4e508ace80"",
            ""actions"": [
                {
                    ""name"": ""SelectLeft"",
                    ""type"": ""Button"",
                    ""id"": ""852aa538-bd19-4410-8a9c-fea7dbe7330e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectRight"",
                    ""type"": ""Button"",
                    ""id"": ""957bd17f-0729-41d5-8955-5220f82406bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""342a16a1-f56a-4567-9e49-9c1e6df397dc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0474d50-7fa6-4742-a248-61c312f68ab1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a77c47c3-429c-4a0a-aa3d-552373272668"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11fe817c-bece-452a-a102-0f9e669399ae"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Select
            m_Select = asset.FindActionMap("Select", throwIfNotFound: true);
            m_Select_SelectLeft = m_Select.FindAction("SelectLeft", throwIfNotFound: true);
            m_Select_SelectRight = m_Select.FindAction("SelectRight", throwIfNotFound: true);
        }

        ~@ModeSelectInputs()
        {
            UnityEngine.Debug.Assert(!m_Select.enabled, "This will cause a leak and performance issues, ModeSelectInputs.Select.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Select
        private readonly InputActionMap m_Select;
        private List<ISelectActions> m_SelectActionsCallbackInterfaces = new List<ISelectActions>();
        private readonly InputAction m_Select_SelectLeft;
        private readonly InputAction m_Select_SelectRight;
        public struct SelectActions
        {
            private @ModeSelectInputs m_Wrapper;
            public SelectActions(@ModeSelectInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @SelectLeft => m_Wrapper.m_Select_SelectLeft;
            public InputAction @SelectRight => m_Wrapper.m_Select_SelectRight;
            public InputActionMap Get() { return m_Wrapper.m_Select; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SelectActions set) { return set.Get(); }
            public void AddCallbacks(ISelectActions instance)
            {
                if (instance == null || m_Wrapper.m_SelectActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SelectActionsCallbackInterfaces.Add(instance);
                @SelectLeft.started += instance.OnSelectLeft;
                @SelectLeft.performed += instance.OnSelectLeft;
                @SelectLeft.canceled += instance.OnSelectLeft;
                @SelectRight.started += instance.OnSelectRight;
                @SelectRight.performed += instance.OnSelectRight;
                @SelectRight.canceled += instance.OnSelectRight;
            }

            private void UnregisterCallbacks(ISelectActions instance)
            {
                @SelectLeft.started -= instance.OnSelectLeft;
                @SelectLeft.performed -= instance.OnSelectLeft;
                @SelectLeft.canceled -= instance.OnSelectLeft;
                @SelectRight.started -= instance.OnSelectRight;
                @SelectRight.performed -= instance.OnSelectRight;
                @SelectRight.canceled -= instance.OnSelectRight;
            }

            public void RemoveCallbacks(ISelectActions instance)
            {
                if (m_Wrapper.m_SelectActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISelectActions instance)
            {
                foreach (var item in m_Wrapper.m_SelectActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SelectActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SelectActions @Select => new SelectActions(this);
        public interface ISelectActions
        {
            void OnSelectLeft(InputAction.CallbackContext context);
            void OnSelectRight(InputAction.CallbackContext context);
        }
    }
}
